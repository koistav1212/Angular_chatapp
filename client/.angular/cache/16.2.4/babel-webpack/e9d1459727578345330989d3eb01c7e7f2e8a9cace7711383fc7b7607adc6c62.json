{"ast":null,"code":"import _asyncToGenerator from \"C:/Games/my_Whatsapp_clone/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:5000/';\nconst socketUrl = \"http://localhost:5000/\";\nexport let services = /*#__PURE__*/(() => {\n  class services {\n    constructor(http, afAuth) {\n      this.http = http;\n      this.afAuth = afAuth;\n      this.currUser = {};\n    }\n    getCurrUser() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        return _this.afAuth.authState.pipe(switchMap(afUser => {\n          // Inner observable\n          return _this.http.get(baseUrl + \"getUserbyID/\" + afUser.uid);\n        }));\n      })();\n    }\n    setCurrUser(data) {\n      this.currUser = data;\n    }\n    addUser(data) {\n      return this.http.post(baseUrl + \"addUsers\", data);\n    }\n    userUpdate(data, id) {\n      return this.http.put(baseUrl + \"updateUserbyID/\" + id, data);\n    }\n    getUsers() {\n      return this.http.get(baseUrl + \"geAlltUsers\");\n    }\n    userLogin(userData) {\n      return this.http.post(baseUrl + \"user-login\", userData);\n    }\n    getAllConversation(data) {\n      return this.http.post(baseUrl + \"conversation/get\", data);\n    }\n    newConversation(data) {\n      return this.http.post(baseUrl + \"conversation/add\", data);\n    }\n    addMessage(data) {\n      return this.http.post(baseUrl + \"message/add\", data);\n    }\n    getMessages(id) {\n      return this.http.get(baseUrl + \"message/get/\" + id);\n    }\n    static #_ = this.ɵfac = function services_Factory(t) {\n      i0.ɵɵinvalidFactory();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: services,\n      factory: services.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return services;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}